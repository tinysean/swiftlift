#!/usr/bin/python3
import tkinter as tk
from fractions import Fraction as frac



def format_mixed(f):
    """Format the fraction f as a (possibly) mixed fraction.    """
    if abs(f) <= 1 or f.denominator == 1:
        return str(f)
    return '{0} {1.numerator}/{1.denominator}'.format(int(f), abs(f - int(f)))

""" This converts an mixed fraction string like 17/16 to "1 1/16" """
def f(s):
    a,b=s.split();
    b,c=b.split('/');
    print("a=", a, "b=", b, "c=", c)
    print("")
    if (int(a)<0):
        return'%s/'%(int(a)*int(c)-int(b))+c
    else:
        return'%s/'%(int(a)*int(c)+int(b))+c

def format_improper(mixed_str):
    """ Decide if the fraction string represents a mixed fraction """
    print("mixed=", mixed_str)
    if (mixed_str.find(" ") == -1):
        """ Non-mixed """
        return str(mixed_str)
    else:
        """ Mixed fraction """
        return f(mixed_str)

def show_lan(my_bText,numButton):
    print(my_bText, numButton)

    if (numButton == 0):
        ''' Insert code to reset zero '''
        print("Reset Zero")

    if (numButton == 1):
        globals()["liftDelta"]="1/32"

    if (numButton == 2) or (numButton == 5):
        improper=format_improper( fractionText.get() )
        print("Imp = ", improper)
        print("Delta =", liftDelta)
        if (numButton == 2):
            print("Up")
            fractionText.set( format_mixed( frac( improper ) + frac( globals()["liftDelta"] )) )
        else:
            print("Down")
            fractionText.set( format_mixed( frac( improper ) - frac( globals()["liftDelta"] )) )

    if (numButton == 3):
        ''' Insert code for auto zero '''
        print("Auto Zero")

    if (numButton == 4):
        globals()["liftDelta"]="1/64"

    if (numButton == 6):
        if (globals()["units"] == "imp"):
            globals()["units"]="metric"
            ''' Insert code to convert current display to metric '''
        else:
            globals()["units"]="imp"
            ''' Insert code to convert current display to fractions '''

#def buttonPress(event):
#    print("Button pressed", event.widget)
#    event.widget.configure(bg = "red")

# Buttons:  Up, Down, Zero Out, Auto Zero, mm/in, Macro Adj, Micro Adj
def create_buttons(container):
    print(liftDelta)
    button_frame = tk.Frame(container,
        bg="Black",
        borderwidth = 5,
        border=1,
        relief=tk.GROOVE,
    )
    button_frame.columnconfigure(0, weight=1)
    button_frame.columnconfigure(1, weight=1)
    button_frame.columnconfigure(2, weight=1)
    button_frame.rowconfigure(0, weight=1)
    button_frame.rowconfigure(1, weight=1)
    button_frame.rowconfigure(2, weight=1)

    button_list = ("Reset\nZero", "Macro\nAdj", "Up",
                "Auto\nZero", "Micro\nAdj", "Down",
                "in/mm", "", "",
                )

    bCol=0
    bRow=0
    numButton=0

    ''' btnNumber.bind('<ButtonRelease-1>', destroy) '''
    for bText in button_list:
        if (bText == ""):
            button = tk.Button(button_frame,
                    text=bText,
                    bg="Black",
                    fg="White",
                    command=lambda numButton=numButton, lan=bText:show_lan(lan, numButton),
                    state="disabled"
                    )
        else:
            button = tk.Button(button_frame,
                    text=bText,
                    bg="Black",
                    fg="White",
                    command=lambda numButton=numButton, lan=bText:show_lan(lan, numButton)
                    )
#        button.bind('<ButtonRelease-1>', buttonPress)
        button.grid(row=(bRow), column=bCol, sticky="news", padx=5, pady=5)
        bCol+=1
        numButton+=1
        if (bCol >= 3):
            bRow+=1
            bCol=0

    return button_frame

def create_fraction_label(container):
    fraction_frame = tk.Frame(container,
        bg="Black",
        borderwidth = 5,
        border=1,
        relief=tk.GROOVE,
    )

    label = tk.Label(fraction_frame,
        textvariable=fractionText,
        bg="Black",
        fg="turquoise1",
        font=("Technology", 50),
        borderwidth=5,
        anchor="center",
        justify="center",
    )

    spacer_top_label = tk.Label(fraction_frame, text='t', font=("Ariel", 40), bg="Black", fg="Black", anchor="center")
    spacer_bottom_label = tk.Label(fraction_frame, bg="Black", anchor="center")

    label.columnconfigure(0, weight=1)
    label.columnconfigure(1, weight=3)
    label.rowconfigure(0, weight=5)
    label.rowconfigure(1, weight=1)
    label.rowconfigure(2, weight=5)

    spacer_top_label.grid(column=0, row=0, sticky="news")
    label.grid(column=1, row=1, sticky="news")
    spacer_bottom_label.grid(column=0, row=2, sticky="news")

    return fraction_frame

def create_status_label(container):
    status_frame = tk.Frame(container,
        bg="Black",
        borderwidth = 5,
        border = 1,
        relief=tk.SUNKEN,
    )

    label = tk.Label(status_frame,
        textvariable=statusText,
        bg="Black",
        fg="White",
        borderwidth=5,
        anchor=tk.W,
        justify="left",
    )

    label.columnconfigure(0, weight=1)
    label.rowconfigure(0, weight=1)
    label.grid(sticky="W")

    return status_frame

def create_main_window(root):
    print(liftDelta)

    root.title('Swift Lift v0.1')
    root.geometry("800x480")
    root.grid_rowconfigure(0, weight=4)
    root.grid_rowconfigure(1, weight=1)
    root.grid_columnconfigure(0, weight=1)
    root.grid_columnconfigure(1, weight=40)

    statusText=tk.StringVar()
#    root.resizable(0, 0)

    button_frame=create_buttons(root)
    button_frame.grid( column=0, row=0, sticky='news')

    fraction_frame=create_fraction_label(root)
    fraction_frame.grid(column=1, row=0, sticky="news", rowspan=2)

    status_label=create_status_label(root)
    status_label.grid(column=0, row=1, sticky='news', columnspan=2)

    root.mainloop()

if __name__ == "__main__":
    root = tk.Tk()
    statusText=tk.StringVar()
    statusText.set("This is some text")
    fractionText=tk.StringVar()
    fractionText.set('0')
    global liftDelta
    liftDelta="1/32"

    global units
    units="imp"

    create_main_window(root)
